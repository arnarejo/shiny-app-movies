ilo_data_factored %>%
filter(country %in% european_countries) %>%
group_by(year) %>%
summarise(avg_hourly_compensation = mean(hourly_compensation),
avg_working_hours = mean(working_hours)) %>%
ggplot(aes(x = year, y = avg_hourly_compensation)) + geom_line()
ilo_data_factored %>%
filter(country %in% european_countries) %>%
group_by(year) %>%
summarise(avg_hourly_compensation = mean(hourly_compensation),
avg_working_hours = mean(working_hours)) %>%
ggplot(aes(x = factor(year), y = avg_hourly_compensation)) + geom_line()
ilo_data_factored %>%
filter(country %in% european_countries) %>%
group_by(year) %>%
summarise(avg_hourly_compensation = mean(hourly_compensation),
avg_working_hours = mean(working_hours)) %>%
ggplot(aes(x = year, y = avg_hourly_compensation)) + geom_line()
ilo_data_factored %>%
filter(country %in% european_countries) %>%
group_by(year) %>%
summarise(avg_hourly_compensation = mean(hourly_compensation),
avg_working_hours = mean(working_hours)) %>%
ggplot(aes(x = year, y = avg_hourly_compensation)) + geom_point()
ilo_data_factored %>%
filter(country %in% european_countries) %>%
group_by(year) %>%
summarise(avg_hourly_compensation = mean(hourly_compensation),
avg_working_hours = mean(working_hours)) %>%
ggplot(aes(x = year, y = avg_hourly_compensation)) + geom_point() + geom_line()
ilo_data_factored %>%
filter(country %in% european_countries) %>%
group_by(year) %>%
summarise(avg_hourly_compensation = mean(hourly_compensation),
avg_working_hours = mean(working_hours)) %>%
ggplot(aes(x = year, y = avg_hourly_compensation, group = 1)) + geom_point() + geom_line()
ilo_data_factored %>%
filter(country %in% european_countries) %>%
group_by(year) %>%
summarise(avg_hourly_compensation = mean(hourly_compensation),
avg_working_hours = mean(working_hours)) %>%
ggplot(aes(x = year, y = avg_hourly_compensation, group = 1)) + geom_line()
ilo_data_factored %>%
filter(country %in% european_countries) %>%
group_by(year) %>%
summarise(avg_hourly_compensation = mean(hourly_compensation),
avg_working_hours = mean(working_hours)) %>%
ggplot(aes(x = year, y = avg_hourly_compensation, group = 1)) +
geom_line() +
geom_line(aes(y = avg_working_hours))
ilo_data_factored %>%
filter(country %in% european_countries) %>%
group_by(year) %>%
summarise(avg_hourly_compensation = mean(hourly_compensation),
avg_working_hours = mean(working_hours)) %>%
ggplot(aes(x = avg_hourly_compensation, y = avg_working_hours))
ilo_data_factored %>%
filter(country %in% european_countries) %>%
group_by(year) %>%
summarise(avg_hourly_compensation = mean(hourly_compensation),
avg_working_hours = mean(working_hours)) %>%
ggplot(aes(x = avg_hourly_compensation, y = avg_working_hours)) + geom_point()
ilo_data_factored %>%
filter(country %in% european_countries) %>%
group_by(year) %>%
summarise(avg_hourly_compensation = mean(hourly_compensation),
avg_working_hours = mean(working_hours)) %>%
ggplot(aes(x = avg_hourly_compensation, y = avg_working_hours)) +
geom_point() +
geom_smooth(method='lm')
ilo_data_factored %>%
filter(country %in% european_countries) %>%
group_by(year) %>%
summarise(avg_hourly_compensation = mean(hourly_compensation),
avg_working_hours = mean(working_hours)) %>%
ggplot(aes(x = avg_hourly_compensation, y = avg_working_hours)) +
geom_point() +
geom_smooth(method='lm') +
labs(x = "Average hourly compensation", y = "Average working hours")
ilo_data_factored %>%
filter(country %in% european_countries) %>%
group_by(year) %>%
summarise(avg_hourly_compensation = mean(hourly_compensation),
avg_working_hours = mean(working_hours)) %>%
ggplot(aes(x = avg_hourly_compensation, y = avg_working_hours)) +
geom_point() +
geom_smooth(method='lm') +
labs(x = "Average hourly compensation",
y = "Average working hours",
title = "ILO data comparison of working hours and average hourly rate in european countries",
subtitle = "Average for each year between 1980 and 2008",
caption = "source: ILO")
library(tidyverse)
library(ggthemes)
library(forcats)
# load files
load("data/ilo_hourly_compensation.RData")
load("data/ilo_working_hours.RData")
ilo_data <- ilo_hourly_compensation %>%
inner_join(ilo_working_hours, on = c(country, year))
ilo_data <- ilo_hourly_compensation %>%
inner_join(ilo_working_hours, on = c(country, year))
ilo_data <- ilo_hourly_compensation %>%
inner_join(ilo_working_hours, on = c(country, year))
ilo_data$year <- as.numeric(ilo_data$year)
ilo_data_factored <- ilo_data %>%
mutate(year = as.factor(year),
country = as.factor(country))
ilo_data_factored %>%
head() %>%
knitr::kable()
# vector of all european countries
european_countries <- c("Finland", "France", "Italy", "Norway", "Spain", "Sweden", "Switzerland", "United Kingdom", "Belgium", "Ireland", "Luxembourg", "Portugal", "Netherlands", "Germany", "Hungary", "Austria", "Czech Rep.")
ilo_data_factored %>%
filter(country %in% european_countries) %>%
group_by(year) %>%
summarise(avg_hourly_compensation = mean(hourly_compensation),
avg_working_hours = mean(working_hours)) %>%
ggplot(aes(x = avg_hourly_compensation, y = avg_working_hours)) +
geom_point() +
geom_smooth(method='lm') +
labs(x = "Average hourly compensation",
y = "Average working hours",
title = "ILO data comparison of working hours and average hourly rate in european countries",
subtitle = "Average for each year between 1980 and 2008",
caption = "source: ILO")
ilo_data_final <- ilo_data_factored %>%
filter(country %in% european_countries) %>%
filter(year == 1996 | year == 2006)
# Some summary statistics
ilo_data_final %>%
group_by(year) %>%
summarize(mean_hourly_compensation = mean(hourly_compensation),
mean_working_hours = mean(working_hours)) %>%
knitr::kable()
base_plot <- ggplot(ilo_data_final, aes(x = hourly_compensation, y = working_hours) ) +
geom_point() +
labs(x = "Compensation per hour",
y = "Hour per week",
title = "Lesser working hours lead to higher wages",
subtitle = "Working hours and hourly compensation in European countries, 1980 vs. 2006",
caption = " Data source, ILO") +
facet_grid(. ~ year)
base_plot
base_plot <- ggplot(ilo_data_final, aes(x = hourly_compensation, y = working_hours) ) +
geom_point() +
labs(x = "Compensation per hour",
y = "Hour per week",
title = "Lesser working hours lead to higher wages",
subtitle = "Working hours and hourly compensation in European countries, 1980 vs. 2006",
caption = " Data source, ILO") +
facet_grid(. ~ year)
base_plot
base_plot + theme_minimal()
base_plot + theme_economist()
base_plot + theme_minimal() +
theme(
text = element_text(family = "Arial", color = "gray25"),
plot.subtitle = element_text(size = 12),
plot.caption = element_text(color = "gray30"),
plot.background = element_rect(fill = "gray95"),
plot.margin = unit(c(5, 10, 5, 10), units = "mm")
)
theme_ilo <- function() {
theme_minimal() +
theme(
text = element_text(family = "Arial", color = "gray25"),
plot.subtitle = element_text(size = 12),
plot.caption = element_text(color = "gray30"),
plot.background = element_rect(fill = "gray95"),
plot.margin = unit(c(5, 10, 5, 10), units = "mm")
)
}
ilo_plot <- base_plot + theme_ilo()
ilo_plot
ilo_plot + theme(
# Change the background fill and color
strip.background = element_rect(fill = "gray60",  color = "gray95"),
# Change the color of the text
strip.text = element_text(color = "white")
)
ilo_plot + theme(
# Change the background fill and color
strip.background = element_rect(fill = "gray60",  color = "gray95"),
# Change the color of the text
strip.text = element_text(color = "white")
)
ggplot(ilo_data_final, aes(x = working_hours, y = country)) +
geom_path(
# Add an arrow to each path
arrow = arrow(length = unit(1.5, "mm"), type = "closed")) +
# Add a geom_text() geometry
geom_text(aes(x = working_hours,
y = country,
label = round(working_hours, 1))
)
# Reorder country factor levels
ilo_data_final <- ilo_data_final %>%
# Arrange data frame
arrange(year) %>%
# Reorder countries by working hours in 2006
mutate(country = fct_reorder(country,
working_hours,
last))
# Plot again
ggplot(ilo_data_final) +
geom_path(aes(x = working_hours, y = country),
arrow = arrow(length = unit(1.5, "mm"), type = "closed")) +
geom_text(
aes(x = working_hours,
y = country,
label = round(working_hours, 1))
)
# Reorder country factor levels
ilo_data_final <- ilo_data_final %>%
# Arrange data frame
arrange(year) %>%
# Reorder countries by working hours in 2006
mutate(country = fct_reorder(country,
working_hours,
last))
# Plot again
ggplot(ilo_data_final) +
geom_path(aes(x = working_hours, y = country),
arrow = arrow(length = unit(1.5, "mm"), type = "closed")) +
geom_text(
aes(x = working_hours,
y = country,
label = round(working_hours, 1))
)
# Save plot into an object for reuse
ilo_dot_plot <- ggplot(ilo_data_final) +
geom_path(aes(x = working_hours, y = country),
arrow = arrow(length = unit(1.5, "mm"), type = "closed")) +
# Specify the hjust aesthetic with a conditional value
geom_text(
aes(x = working_hours,
y = country,
label = round(working_hours, 1),
hjust = ifelse(year == "2006", 1.4, -0.4)
),
# Change the appearance of the text
size = 3,
family = "Arial",
color = "gray25"
)
ilo_dot_plot
# Save plot into an object for reuse
ilo_dot_plot <- ggplot(ilo_data_final) +
geom_path(aes(x = working_hours, y = country),
arrow = arrow(length = unit(1.5, "mm"), type = "closed")) +
# Specify the hjust aesthetic with a conditional value
geom_text(
aes(x = working_hours,
y = country,
label = round(working_hours, 1),
hjust = ifelse(year == "2006", 1.4, -0.4)
),
# Change the appearance of the text
size = 3,
family = "Arial",
color = "gray25"
)
ilo_dot_plot
# Save plot into an object for reuse
ilo_dot_plot <- ggplot(ilo_data_final) +
geom_path(aes(x = working_hours, y = country),
arrow = arrow(length = unit(1.5, "mm"), type = "closed")) +
# Specify the hjust aesthetic with a conditional value
geom_text(
aes(x = working_hours,
y = country,
label = round(working_hours, 1),
hjust = ifelse(year == "2006", 2, -2)
),
# Change the appearance of the text
size = 3,
family = "Arial",
color = "gray25"
)
ilo_dot_plot
# Save plot into an object for reuse
ilo_dot_plot <- ggplot(ilo_data_final) +
geom_path(aes(x = working_hours, y = country),
arrow = arrow(length = unit(1.5, "mm"), type = "closed")) +
# Specify the hjust aesthetic with a conditional value
geom_text(
aes(x = working_hours,
y = country,
label = round(working_hours, 1),
hjust = ifelse(year == "2006", 0, 0)
),
# Change the appearance of the text
size = 3,
family = "Arial",
color = "gray25"
)
ilo_dot_plot
# Save plot into an object for reuse
ilo_dot_plot <- ggplot(ilo_data_final) +
geom_path(aes(x = working_hours, y = country),
arrow = arrow(length = unit(1.5, "mm"), type = "closed")) +
# Specify the hjust aesthetic with a conditional value
geom_text(
aes(x = working_hours,
y = country,
label = round(working_hours, 1),
hjust = ifelse(year == "2006", 1, -1)
),
# Change the appearance of the text
size = 3,
family = "Arial",
color = "gray25"
)
ilo_dot_plot
# Save plot into an object for reuse
ilo_dot_plot <- ggplot(ilo_data_final) +
geom_path(aes(x = working_hours, y = country),
arrow = arrow(length = unit(1.5, "mm"), type = "closed")) +
# Specify the hjust aesthetic with a conditional value
geom_text(
aes(x = working_hours,
y = country,
label = round(working_hours, 1),
hjust = ifelse(year == "2006", 0.5, -0.5)
),
# Change the appearance of the text
size = 3,
family = "Arial",
color = "gray25"
)
ilo_dot_plot
# Save plot into an object for reuse
ilo_dot_plot <- ggplot(ilo_data_final) +
geom_path(aes(x = working_hours, y = country),
arrow = arrow(length = unit(1.5, "mm"), type = "closed")) +
# Specify the hjust aesthetic with a conditional value
geom_text(
aes(x = working_hours,
y = country,
label = round(working_hours, 1),
hjust = ifelse(year == "2006", 1.5, -0.3)
),
# Change the appearance of the text
size = 3,
family = "Arial",
color = "gray25"
)
ilo_dot_plot
ilo_dot_plot <- ilo_dot_plot +
# Add labels to the plot
labs(
x = "Working hours per week",
y = "Country",
title = "People work less in 2006 compared to 1996",
subtitle = "Working hours in European countries, development since 1996",
caption = "Data source: ILO, 2017"
) +
# Apply your theme
theme_ilo() +
# Change the viewport
coord_cartesian(xlim = c(25, 41))
# View the plot
ilo_dot_plot
# Compute temporary data set for optimal label placement
median_working_hours <- ilo_data_final %>%
group_by(country) %>%
summarize(median_working_hours_per_country = median(working_hours)) %>%
ungroup()
# Have a look at the structure of this data set
str(median_working_hours)
ilo_dot_plot +
# Add label for country
geom_text(data = median_working_hours,
aes(y = country,
x = median_working_hours_per_country,
label = country),
vjust = 2,
family = "Arial",
color = "gray25") +
# Remove axes and grids
theme(
axis.ticks = element_blank(),
axis.title = element_blank(),
axis.text = element_blank(),
panel.grid = element_blank(),
# Also, let's reduce the font size of the subtitle
plot.subtitle = element_text(size = 8)
)
# Compute temporary data set for optimal label placement
median_working_hours <- ilo_data_final %>%
group_by(country) %>%
summarize(median_working_hours_per_country = median(working_hours)) %>%
ungroup()
# Have a look at the structure of this data set
str(median_working_hours)
ilo_dot_plot +
# Add label for country
geom_text(data = median_working_hours,
aes(y = country,
x = median_working_hours_per_country,
label = country),
vjust = 2,
family = "Arial",
color = "gray25") +
# Remove axes and grids
theme(
axis.ticks = element_blank(),
axis.title = element_blank(),
axis.text = element_blank(),
panel.grid = element_blank(),
# Also, let's reduce the font size of the subtitle
plot.subtitle = element_text(size = 8)
)
# Compute temporary data set for optimal label placement
median_working_hours <- ilo_data_final %>%
group_by(country) %>%
summarize(median_working_hours_per_country = median(working_hours)) %>%
ungroup()
# Have a look at the structure of this data set
#str(median_working_hours)
ilo_dot_plot +
# Add label for country
geom_text(data = median_working_hours,
aes(y = country,
x = median_working_hours_per_country,
label = country),
vjust = 2,
family = "Arial",
color = "gray25") +
# Remove axes and grids
theme(
axis.ticks = element_blank(),
axis.title = element_blank(),
axis.text = element_blank(),
panel.grid = element_blank(),
# Also, let's reduce the font size of the subtitle
plot.subtitle = element_text(size = 8)
)
list.files()
getwd()
list.files("documents/programming/git/R-DS/shiny/shiny-movies-app")
dim(movies)
#list.files("documents/programming/git/R-DS/shiny/shiny-movies-app")
load("documents/programming/git/R-DS/shiny/shiny-movies-app/movies.Rdata")
dim(movies)
shiny::runApp('Documents/PROGRAMMING/git/R-DS/shiny/shiny-movies-app')
runApp('Documents/PROGRAMMING/git/R-DS/shiny/shiny-movies-app')
runApp('Documents/PROGRAMMING/git/R-DS/shiny/shiny-movies-app')
runApp('Documents/PROGRAMMING/git/R-DS/shiny/shiny-movies-app')
load("documents/programming/git/R-DS/shiny/shiny-movies-app/movies.Rdata")
runApp('Documents/PROGRAMMING/git/R-DS/shiny/shiny-movies-app')
runApp('Documents/PROGRAMMING/git/R-DS/shiny/shiny-movies-app')
runApp('Documents/PROGRAMMING/git/R-DS/shiny/shiny-movies-app')
runApp('Documents/PROGRAMMING/git/R-DS/shiny/shiny-movies-app')
runApp('Documents/PROGRAMMING/git/R-DS/shiny/shiny-movies-app')
runApp('Documents/PROGRAMMING/git/R-DS/shiny/shiny-movies-app')
runApp('Documents/PROGRAMMING/git/R-DS/shiny/shiny-movies-app')
runApp('Documents/PROGRAMMING/git/R-DS/shiny/shiny-movies-app')
shiny::runApp('Documents/PROGRAMMING/git/R-DS/shiny/shiny-movies-app')
runApp('Documents/PROGRAMMING/git/R-DS/shiny/shiny-movies-app')
runApp('Documents/PROGRAMMING/git/R-DS/shiny/shiny-movies-app')
runApp('Documents/PROGRAMMING/git/R-DS/shiny/shiny-movies-app')
runApp('Documents/PROGRAMMING/git/R-DS/shiny/shiny-movies-app')
runApp('Documents/PROGRAMMING/git/R-DS/shiny/shiny-movies-app')
runApp('Documents/PROGRAMMING/git/R-DS/shiny/shiny-movies-app')
runApp('Documents/PROGRAMMING/git/R-DS/shiny/shiny-movies-app')
runApp('Documents/PROGRAMMING/git/R-DS/shiny/shiny-movies-app')
runApp('Documents/PROGRAMMING/git/R-DS/shiny/shiny-movies-app')
runApp('Documents/PROGRAMMING/git/R-DS/shiny/shiny-movies-app')
head(movies)
load("movies.Rdata")
list.fileS()
list.fileS()
list.files()
list.files("/documents/programming/git/R-DS/shiny")
list.files("/documents/programming/git")
list.files("documents/programming/git")
list.files("documents/programming/git/R-DS/shiny")
list.files("documents/programming/git/R-DS/shiny/shiny-movies-app")
load("documents/programming/git/R-DS/shiny/shiny-movies-app/movies.Rdata")
head(movies)
str(movies)
levels(movies$title_type)
runApp('Documents/PROGRAMMING/git/R-DS/shiny/shiny-movies-app')
runApp('Documents/PROGRAMMING/git/R-DS/shiny/shiny-movies-app')
runApp('Documents/PROGRAMMING/git/R-DS/shiny/shiny-movies-app')
runApp('Documents/PROGRAMMING/git/R-DS/shiny/shiny-movies-app')
runApp('Documents/PROGRAMMING/git/R-DS/shiny/shiny-movies-app')
runApp('Documents/PROGRAMMING/git/R-DS/shiny/shiny-movies-app')
runApp('Documents/PROGRAMMING/git/R-DS/shiny/shiny-movies-app')
runApp('Documents/PROGRAMMING/git/R-DS/shiny/shiny-movies-app')
runApp('Documents/PROGRAMMING/git/R-DS/shiny/shiny-movies-app')
runApp('Documents/PROGRAMMING/git/R-DS/shiny/shiny-movies-app')
runApp('Documents/PROGRAMMING/git/R-DS/shiny/shiny-movies-app')
runApp('Documents/PROGRAMMING/git/R-DS/shiny/shiny-movies-app')
shiny::runApp('Documents/PROGRAMMING/git/R-DS/shiny/shiny-movies-app')
runApp('Documents/PROGRAMMING/git/R-DS/shiny/shiny-movies-app')
list.files("Documents/PROGRAMMING/git/R-DS/shiny/shiny-movies-app")
load("Documents/PROGRAMMING/git/R-DS/shiny/shiny-movies-app/movies.Rdata")
str(movies)
runApp('Documents/PROGRAMMING/git/R-DS/shiny/shiny-movies-app')
shiny::runApp('Documents/PROGRAMMING/git/R-DS/shiny/shiny-movies-app')
library(DT)
install.packages("DT")
runApp('Documents/PROGRAMMING/git/R-DS/shiny/shiny-movies-app')
runApp('Documents/PROGRAMMING/git/R-DS/shiny/shiny-movies-app')
runApp('Documents/PROGRAMMING/git/R-DS/shiny/shiny-movies-app')
runApp('Documents/PROGRAMMING/git/R-DS/shiny/shiny-movies-app')
runApp('Documents/PROGRAMMING/git/R-DS/shiny/shiny-movies-app')
runApp('Documents/PROGRAMMING/git/R-DS/shiny/shiny-movies-app')
shiny::runApp('Documents/PROGRAMMING/git/R-DS/shiny/shiny-movies-app')
